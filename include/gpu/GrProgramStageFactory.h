/*
 * Copyright 2012 Google Inc.
 *
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

#ifndef GrProgramStageFactory_DEFINED
#define GrProgramStageFactory_DEFINED

#include "GrTypes.h"
#include "SkTemplates.h"
#include "GrNoncopyable.h"

/** Given a GrEffect of a particular type, creates the corresponding
    graphics-backend-specific GrGLEffect. Also tracks equivalence
    of shaders generated via a key.
 */

class GrEffect;
class GrGLEffect;
class GrGLCaps;

class GrProgramStageFactory : public GrNoncopyable {
public:
    typedef uint32_t StageKey;
    enum {
        kProgramStageKeyBits = 10,
        kTexturingStageKeyBits = 6
    };

    virtual StageKey glStageKey(const GrEffect&, const GrGLCaps&) const = 0;
    virtual GrGLEffect* createGLInstance(const GrEffect&) const = 0;

    bool operator ==(const GrProgramStageFactory& b) const {
        return fEffectClassID == b.fEffectClassID;
    }
    bool operator !=(const GrProgramStageFactory& b) const {
        return !(*this == b);
    }

    virtual const char* name() const = 0;

protected:
    enum {
        kIllegalEffectClassID = 0,
    };

    GrProgramStageFactory() {
        fEffectClassID = kIllegalEffectClassID;
    }

    static StageKey GenID() {
        // fCurrEffectClassID has been initialized to kIllegalEffectClassID. The
        // atomic inc returns the old value not the incremented value. So we add
        // 1 to the returned value.
        int32_t id = sk_atomic_inc(&fCurrEffectClassID) + 1;
        GrAssert(id < (1 << (8 * sizeof(StageKey) - kProgramStageKeyBits)));
        return id;
    }

    StageKey fEffectClassID;

private:
    static int32_t fCurrEffectClassID;
};

template <typename EffectClass>
class GrTProgramStageFactory : public GrProgramStageFactory {

public:
    typedef typename EffectClass::GLProgramStage GLProgramStage;

    /** Returns a human-readable name that is accessible via GrEffect or
        GrGLEffect and is consistent between the two of them.
     */
    virtual const char* name() const SK_OVERRIDE { return EffectClass::Name(); }

    /** Returns a value that identifies the GLSL shader code generated by
        a GrEffect. This enables caching of generated shaders. Part of the
        id identifies the GrEffect subclass. The remainder is based
        on the aspects of the GrEffect object's configuration that affect
        GLSL code generation. */
    virtual StageKey glStageKey(const GrEffect& effect, const GrGLCaps& caps) const SK_OVERRIDE {
        GrAssert(kIllegalEffectClassID != fEffectClassID);
        StageKey stageID = GLProgramStage::GenKey(effect, caps);
        StageKey textureKey = GLProgramStage::GenTextureKey(effect, caps);
#if GR_DEBUG
        static const StageKey kIllegalIDMask = (uint16_t) (~((1U << kProgramStageKeyBits) - 1));
        GrAssert(!(kIllegalIDMask & stageID));

        static const StageKey kIllegalTextureKeyMask =
            (uint16_t) (~((1U << kTexturingStageKeyBits) - 1));
        GrAssert(!(kIllegalTextureKeyMask & textureKey));
#endif
        return fEffectClassID | (textureKey << kProgramStageKeyBits) | stageID;
    }

    /** Returns a new instance of the appropriate *GL* implementation class
        for the given GrEffect; caller is responsible for deleting
        the object. */
    virtual GLProgramStage* createGLInstance(const GrEffect& effect) const SK_OVERRIDE {
        return SkNEW_ARGS(GLProgramStage, (*this, effect));
    }

    /** This class is a singleton. This function returns the single instance.
     */
    static const GrProgramStageFactory& getInstance() {
        static SkAlignedSTStorage<1, GrTProgramStageFactory> gInstanceMem;
        static const GrTProgramStageFactory* gInstance;
        if (!gInstance) {
            gInstance = SkNEW_PLACEMENT(gInstanceMem.get(),
                                        GrTProgramStageFactory);
        }
        return *gInstance;
    }

protected:
    GrTProgramStageFactory() {
        fEffectClassID = GenID() << (kProgramStageKeyBits + kTexturingStageKeyBits) ;
    }
};

#endif
