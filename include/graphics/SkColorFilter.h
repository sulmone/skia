#ifndef SkColorFilter_DEFINED
#define SkColorFilter_DEFINED

#include "SkRefCnt.h"
#include "SkColor.h"
#include "SkPorterDuff.h"

class SkColorFilter : public SkRefCnt {
public:
    /** Called with a scanline of colors, as if there was a shader installed.
        The implementation writes out its filtered version into result[].
        @param shader   array of colors, possibly generated by a shader
        @param count    the number of entries in the shader[] and result[] arrays
        @param result   written by the filter, these are the colors that are used to draw
    */
    virtual void filterSpan(const SkPMColor shader[], int count, SkPMColor result[]);
    
    /** Create a colorfilter that uses the specified color and xfermode proc.
        @param srcColor    The source color passed to the xfermode proc
        @param proc     The xfermode proc that is applied to each color in the colorfilter's filterSpan method
        @return colorfilter object that applies the src color and xfermode proc, or NULL if proc is NULL
    */
    static SkColorFilter* CreatXfermodeFilter(SkColor srcColor, SkXfermodeProc proc);
    /** Create a colorfilter that uses the specified color and porter-duff mode.
        @param srcColor    The source color used with the specified porter-duff mode
        @param porterDuffMode     The porter-duff mode that is applied to each color in the colorfilter's filterSpan method
        @return colorfilter object that applies the src color and porter-duff mode, or NULL is mode is out of range
    */
    static SkColorFilter* CreatePorterDuffFilter(SkColor srcColor, SkPorterDuff::Mode porterDuffMode);
    
    /** Create a colorfilter that multiplies the RGB channels by one color, and then adds a second color,
        pinning the result for each component to [0..255]. The alpha components of the mul and add arguments
        are ignored.
    */
    static SkColorFilter* CreateLightingFilter(SkColor mul, SkColor add);
};

#include "SkShader.h"

class SkFilterShader : public SkShader {
public:
    SkFilterShader(SkShader* shader, SkColorFilter* filter);
    virtual ~SkFilterShader();

    // override
    virtual bool setContext(const SkBitmap& device, const SkPaint& paint, const SkMatrix& matrix);
    virtual void shadeSpan(int x, int y, SkPMColor result[], int count);
    
private:
    SkShader*       fShader;
    SkColorFilter*  fFilter;
    
    typedef SkShader INHERITED;
};

#endif
